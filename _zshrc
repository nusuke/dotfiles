# ctrl e ctrl a など
bindkey -e
alias zshrc='vim ~/dotfiles/_zshrc'
alias zshrcs='source ~/.zshrc'
alias gitconfig='vim ~/.gitconfig'
alias sshconfig='vim ~/.sshconfig'
alias vimrc='vim ~/dotfiles/_vimrc'
alias dotfiles='cd ~/dotfiles'
alias desktop='cd ~/desktop'

# Source Prezto.
#if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
#  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
#fi

# Customize to your needs...
#
# git homebewから入れた物を使う
export PATH=/usr/local/Cellar/git/2.20.1/bin:$PATH

# nodebrewのpath
export PATH=$HOME/.nodebrew/current/bin:$PATH

# rbenv
[[ -d ~/.rbenv  ]] && \
  export PATH=${HOME}/.rbenv/bin:${PATH} && \
  eval "$(rbenv init -)" 

#Java
export PATH=$PATH:/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home/bin
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.2.jdk/Contents/Home

# zsh
autoload -U compinit
compinit

autoload -Uz colors
colors

# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zhistory
# メモリに保存される履歴の件数
export HISTSIZE=1000
# 履歴ファイルに保存される履歴の件数
export SAVEHIST=100000
# 重複を記録しない
setopt hist_ignore_dups
# historyを共有
setopt share_history
# ヒストリに追加されるコマンド行が古いものと同じなら古いものを削除
setopt hist_ignore_all_dups
# スペースで始まるコマンド行はヒストリリストから削除
setopt hist_ignore_space
# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify
# 余分な空白は詰めて記録
setopt hist_reduce_blanks  
# 古いコマンドと同じものは無視 
setopt hist_save_no_dups
# historyコマンドは履歴に登録しない
setopt hist_no_store
# 補完時にヒストリを自動的に展開
setopt hist_expand
# 履歴をインクリメンタルに追加
setopt inc_append_history
# インクリメンタルからの検索
#bindkey "^R" history-incremental-search-backward
#bindkey "^S" history-incremental-search-forward
# 全件取得
function history-all { history -E 1 }

ISTIGNORE='fg:fg *bg:bg *histroy:history *'

#Directory color 
#alias ls='ls -FG'
export LSCOLORS=cafxcxdxbxegedabagacad
alias ls='exa'
alias mkdir='mkdir -p'
alias cat='bat'

# fzf
export FZF_DEFAULT_OPTS="--height 50% --layout=reverse --border --inline-info --preview 'bat  --color=always --style=header,grid --line-range :100 {}'"
#export FZF_CTRL_T_COMMAND=rg --files --hidden --follow --glob "!.git/*"
#export FZF_CTRL_T_OPTS=--preview "bat  --color=always --style=header,grid --line-range :100 {}"

function bats() {
  $(bat $1 | fzf --preview "{}")
}
alias fcd='cd $(exa -l | grep ^d | awk '\''{print $7}'\'' | fzf -m --preview "exa {}")'
alias fcda='cd $(exa -la | grep ^d | awk '\''{print $7}'\'' | fzf -m --preview "exa {}")'
alias fr='ghq look $(ghq list | fzf-tmux --reverse +m --preview "cat ~/{}/README.md")'
gd() {
  files=$(git diff --name-only | fzf --preview 'git diff --color {}') &&
  vim $files
}
fvim() {
  files=$(git ls-files) &&
  selected_files=$(echo "$files" | fzf -m --preview "bat  --color=always --style=header,grid --line-range :100 {}") &&
  vim $selected_files
}
# git checkout branchをfzfで選択
alias fb='git checkout $(git branch -a | tr -d " " |fzf --prompt "CHECKOUT BRANCH>" --preview "git log --color=always {}" | head -n 1 | sed -e "s/^\*\s*//g" | perl -pe "s/remotes\/origin\///g")'

function chpwd() {
  powered_cd_add_log
}
function powered_cd_add_log() {
  local i=0
  cat ~/.powered_cd.log | while read line; do
    (( i++ ))
    if [ i = 30 ]; then
      sed -i -e "30,30d" ~/.powered_cd.log
    elif [ "$line" = "$PWD" ]; then
      sed -i -e "${i},${i}d" ~/.powered_cd.log
    fi
  done
  echo "$PWD" >> ~/.powered_cd.log
}
function powered_cd() {
  if [ $# = 0 ]; then
    cd $(gtac ~/.powered_cd.log | fzf -m --preview "ls {}")
  elif [ $# = 1 ]; then
    cd $1
  else
    echo "powered_cd: too many arguments"
  fi
}
_powered_cd() {
  _files -/
}
compdef _powered_cd powered_cd
[ -e ~/.powered_cd.log ] || touch ~/.powered_cd.log
alias c="powered_cd"

# PROMPT
PROMPT="%{${fg[blue]}%}[%~]%{${reset_color}%}"

autoload -Uz vcs_info
setopt prompt_subst
zstyle ':vcs_info:git:*' check-for-changes true
zstyle ':vcs_info:git:*' stagedstr "%F{yellow}!"
zstyle ':vcs_info:git:*' unstagedstr "%F{red}+"
zstyle ':vcs_info:*' formats "%F{green}%c%u[%b]%f"
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () { 
  if [ $? -eq 0 ] ; then
    finish_code=0
  else
    finish_code="%{${fg[red]}%}'${$?}'%{${reset_color}%}"
  fi
  vcs_info 
}

function command_not_found_handler() {
  echo "misssing→「$1」";
}
PROMPT='${finish_code};'$PROMPT'${vcs_info_msg_0_}'
#RPROMPT=$RPROMPT'${vcs_info_msg_0_}'
